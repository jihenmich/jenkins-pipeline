pipeline {
    agent any

    environment {
        EC2_USER = 'ubuntu'
        EC2_HOST = '3.66.88.183' 
        DEPLOY_PATH = '/home/ubuntu/app' 
        SSH_CREDENTIALS = 'jenkins-ec2-key'  
    }

    tools {
        nodejs "nodejs"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/jihenmich/meine-react-app-jenkins.git'
            }
        }

        stage('Linting') {
            steps {
                sh 'npm install'
                sh 'npm run lint'
            }
        }

        stage('Testing') {
            steps {
                sh 'npm test'
            }
        }

        stage('Build the App') {
            steps {
                sh 'npm run build'
                sh 'ls -la'
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(
                    credentialsId: SSH_CREDENTIALS,
                    keyFileVariable: 'EC2_KEY'
                )]) {
                    // Neue Version hochladen:
                    sh '''
                        scp -o StrictHostKeyChecking=no \
                        -i $EC2_KEY \
                        -r build \
                        $EC2_USER@$EC2_HOST:/home/ubuntu/
                    '''
                    // Alte Version löschen, neue Version rüberkopieren, nginx neustarten: 
                    sh '''
                        ssh -o StrictHostKeyChecking=no \
                        -i $EC2_KEY \
                        $EC2_USER@$EC2_HOST \
                        "sudo rm -rf $DEPLOY_PATH/* &&
                        sudo cp -r /home/ubuntu/build/* $DEPLOY_PATH/ &&
                        sudo systemctl restart nginx"
                    '''
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    def response = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' http://$EC2_HOST/",
                        returnStdout: true
                    ).trim()

                    if (response == "200") {
                        echo "Deployment successful!"
                    } else {
                        echo "Deployment unsuccessful :("
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'SCM webhook funktioniert!'
        }
    }
}
